#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <31 28>;
        };

        rh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <43 44>;
        };

        rh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <44 45>;
        };

        rh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <44 45 43>;
        };

        lh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <40 39>;
        };

        lh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <38 39>;
        };

        lh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <38 39 40>;
        };
    };

    macros {
        lcag: lcag {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp LC(LA(LG(MACRO_PLACEHOLDER)))>;
        };

        lca: lca {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp LC(LA(MACRO_PLACEHOLDER))>;
        };

        meh: meh {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp LC(LA(LS(MACRO_PLACEHOLDER)))>;
        };

        lsg: lsg {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp LS(LG(MACRO_PLACEHOLDER))>;
        };
    };

    behaviors {
        td_esc_caps: td_esc_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&kp CAPS>;
        };

        td_lgui_ctrlb: td_lgui_ctrlb {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&kp LC(B)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42>;
            hold-trigger-on-release;
        };

        mt_ctrl_quot: mt_ctrl_quot {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&td_esc_caps    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6       &kp N7       &kp N8       &kp N9       &kp N0       &kp MINUS
&kp TAB         &kp Q        &kp W        &kp E        &kp R        &kp T          &kp Y        &kp U        &kp I        &kp O        &kp P        &kp EQUAL
&kp LSHFT       &hml LGUI A  &hml LALT S  &hml LCTRL D &hml LSHFT F &kp G          &kp H        &hmr RSHFT J &hmr RCTRL K &hmr RALT L  &hmr RGUI SEMI &mt_ctrl_quot RCTRL SQT
&td_lgui_ctrlb  &lt 4 Z      &kp X        &kp C        &kp V        &kp B          &kp N        &kp M        &kp COMMA    &kp DOT      &lt 4 FSLH   &kp LALT
                                          &kp LGUI     &lt 2 SPACE  &lt 1 TAB      &lt 1 RET    &lt 3 BSPC   &kp DEL
                                                       &kp LALT     &kp LCTRL      &kp RSHFT
            >;

            label = "BASE";
        };

        pointer_layer {
            bindings = <
&bootloader     &sys_reset      &none           &none           &none           &none           &none           &none           &none           &none           &sys_reset      &bootloader
&none           &kp F9          &kp F10         &kp F11         &kp F12         &none           &none           &none           &none           &none           &none           &none
&none           &hml LGUI F5    &hml LALT F6    &hml LCTRL F7   &hml LSHFT F8   &none           &kp LEFT        &hmr RSHFT DOWN &hmr RCTRL UP   &hmr RALT RIGHT &hmr RGUI HOME  &kp END
&none           &kp F1          &kp F2          &kp F3          &kp F4          &none           &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_BRI_DN    &kp C_BRI_UP    &none
                                                &none           &none           &trans          &trans          &none           &none
                                                                &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;

            label = "POINTER";
        };

        lower_layer {
            bindings = <
&none           &none           &none           &none           &none           &none           &none           &none           &none           &none           &none           &none
&kp LC(LA(T))   &kp LC(LA(Q))   &kp LC(LA(W))   &kp LC(LA(E))   &kp LC(LA(R))   &kp LC(LA(T))   &none           &none           &none           &none           &none           &none
&none           &lcag A         &lca S          &meh D          &lsg F          &kp LC(LA(G))   &kp LEFT        &hmr RSHFT DOWN &hmr RCTRL UP   &hmr RALT RIGHT &hmr RGUI HOME  &kp END
&none           &kp LC(LA(Z))   &kp LC(LA(X))   &kp LC(LA(C))   &kp LC(LA(V))   &kp LC(LA(B))   &none           &none           &none           &none           &none           &none
                                                &none           &trans          &none           &none           &none           &none
                                                                &none           &none           &none
            >;

            label = "LOWER";
        };

        raise_layer {
            bindings = <
&kp F12         &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11
&none           &none           &none           &none           &none           &none           &none           &kp C_PREV      &kp C_PP        &kp C_NEXT      &none           &none
&none           &hml LGUI F5    &hml LALT F6    &hml LCTRL F7   &hml LSHFT F8   &none           &none           &hmr RSHFT C_VOL_DN &hmr RCTRL C_VOL_UP &hmr RALT C_MUTE &hmr RGUI C_BRI_UP &kp C_BRI_DN
&none           &kp F1          &kp F2          &kp F3          &kp F4          &none           &none           &none           &none           &none           &none           &none
                                                &none           &none           &none           &trans          &none           &none
                                                                &none           &none           &none
            >;

            label = "RAISE";
        };

        symbols_layer {
            bindings = <
&kp GRAVE       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp EQUAL
&kp TILDE       &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT       &kp CARET       &kp AMPS        &kp ASTRK       &kp LPAR        &kp RPAR        &kp PLUS
&none           &hml LGUI GRAVE &hml LALT MINUS &hml LCTRL EQUAL &hml LSHFT LBKT &kp RBKT        &kp SEMI        &hmr RSHFT SQT  &hmr RCTRL COMMA &hmr RALT DOT   &hmr RGUI FSLH  &kp BSLH
&none           &kp TILDE       &kp UNDER       &kp PLUS        &kp LBRC        &kp RBRC        &kp COLON       &kp DQT         &kp LT          &kp GT          &kp QMARK       &kp PIPE
                                                &none           &none           &none           &none           &none           &none
                                                                &none           &none           &none
            >;

            label = "SYMBOLS";
        };
    };
};
